rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read: if request.auth.uid != null && request.auth.uid == userId
      allow create: if request.auth.uid != null && request.auth.uid == userId && request.resource.data.uid == request.auth.uid
      allow update: if request.auth.uid != null && request.auth.uid == userId && request.resource.data.uid == request.auth.uid && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['uid', 'name', 'email', 'photoUrl', 'fcmTokens'])
    }

    match /posts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.owner.uid;
    }
    
    // Rule for update post's comment count or likes array
    function isUpdatePostCommentCountOrLikes() {
      let affectedKeys = request.resource.data.diff(resource.data).affectedKeys();
      return request.auth != null && affectedKeys.hasOnly(['commentCount', 'likes', 'views', 'rank']);
    }
    match /posts/{postId} {
      allow update: if isUpdatePostCommentCountOrLikes();
    }

    // Rules for post's comments
    match /posts/{postId}/comments/{commentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
    }
    // Rules for post's likes
    match /posts/{postId}/likes/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
  }
}